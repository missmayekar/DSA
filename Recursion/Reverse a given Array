   static void printArray(int[] a, int n){
        for (int i = 0; i < n; i++){
            System.out.print(a[i] + " ");
        }
    }

    //1) Reversing the array using auxiliary array
    static void auxiliaryArray(int[] a, int n){
        int[] ans = new int[n];
        for (int i = n-1; i >= 0; i--){
            ans[n-i-1] = a[i];
        }
        printArray(ans, n);
    }

    //2) Reversing the array using two pointers
    static void twoPointer(int[] a, int n){
        int pointer1 = 0;
        int pointer2 = n-1;
        int temp;
        while (pointer1 != pointer2){
            temp = a[pointer1];
            a[pointer1] = a[pointer2];
            a[pointer2] = temp;

            pointer1++;
            pointer2--;
        }

        printArray(a, n);
    }

    //3) Recursive method
    static void recursiveMethod(int[] a, int start, int end, int n){
        if(start >= end){
            printArray(a,n);
            return;
        }

        int temp;
        temp = a[start];
        a[start] = a[end-1];
        a[end - 1] = temp;

        recursiveMethod(a, start+1, end-1, n);

    }

    //4) Using library function
    static void libraryFunction(Integer[] a, int n){
        Collections.reverse(Arrays.asList(a));
        //cannot use printArray function defined above as a here is Integer type and not int
        for (int i = 0; i < n; i++){
            System.out.print(a[i] + " ");
        }

    }

    public static void main(String[] args) {
        int n = 5;
        int[] a = {5, 4, 3, 2, 1};

        auxiliaryArray(a, n);
        System.out.println();

        twoPointer(a, n);
        System.out.println();

        recursiveMethod(a, 0, n, n);

        //defining new array for 4th approach
        Integer[] A = {5, 4, 3, 2, 1};
        libraryFunction(A, n);
        

    }
