/* Time Complexity: O(N) { Since the function is being called n times, and for each function, we have only one printable line that takes 
O(1) time, so the cumulative time complexity would be O(N) } */
    
/* Space Complexity: O(N) { In the worst case, the recursion stack space would be full with all the function calls waiting to 
get completed and that would make it an O(N) recursion stack space } */

//Forward Tracking
    private static void f(int i, int n){
       if (i > n)
           return;

       System.out.println(i);

       f(i+1, n);

    }

    //Backward Tracking
    /*
    private static void f(int i){
        if (i < 1)
            return;

        f(i-1);

        System.out.println(i);
    }
    */

    public static void main(String[] args) {
        f(1, 5);
        //call for backward tracking
        //f(5);
    }
